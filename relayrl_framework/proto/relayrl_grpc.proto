syntax = "proto3";

package relayrl_grpc;

message RelayRLAction {
    bytes obs = 1;      // Serialized tensor data as bytes
    bytes action = 2;   // Serialized action tensor as bytes
    bytes mask = 3;     // Serialized mask tensor as bytes
    float reward = 4;   // Reward as a float
    map<string, bytes> data = 5;  // Changed from string to bytes to handle arrays
    bool done = 6;      // Indicates if this is the last action in trajectory
    bool reward_update_flag = 7; // Indicates if the reward was updated
}

// A message containing a list of RelayRLAction objects
message Trajectory {
    repeated RelayRLAction actions = 1; // A list of RelayRLAction objects
}

message RelayRLModel {
    int32 code = 1; // notify if model is ready. 1 is ready, 0 is not ready, -1 error
    bytes model = 2; // if done = 1, model should have something, else NaN
    int64 version = 3; // current model version, client need to update
    string error = 4; // if done = -1, this should response error message
}

message RequestModel {
    int32 first_time = 1; // 1 means initialize with server, 0 means already handshaked with server, server send model to client
    int64 version = 2; // current version # of client have, if match with server, no update
}

// Define the service to send the list of RelayRLAction objects
service RelayRLRoute {
    rpc SendActions (Trajectory) returns (ActionResponse);
    rpc ClientPoll (RequestModel) returns (RelayRLModel);
}

// A message for the response
message ActionResponse {
    int32 code = 1; // 1 normal, 0 bad response
    string message = 2; // Acknowledgement message
}
